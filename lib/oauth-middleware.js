// Generated by CoffeeScript 1.8.0
(function() {
  var authCallback, authorize, pocket, qs, redirect, request;

  qs = require('qs');

  request = require('request');

  pocket = require('./api');

  redirect = function(res, ret) {
    if (ret.access_token) {
      res.cookie('access_token', ret.access_token);
    }
    return res.json(ret);
  };

  authorize = function(req, res, next) {
    var authorizeUrl, requestTokenUrl;
    requestTokenUrl = pocket.getRequestTokenUrl();
    authorizeUrl = pocket.getAuthorizeUrl();
    return request.post({
      headers: {
        'content-type': 'application/x-www-form-urlencoded'
      },
      url: requestTokenUrl,
      body: qs.stringify({
        consumer_key: pocket.consumer_key,
        redirect_uri: pocket.redirect_uri
      })
    }, function(err, resp, result) {
      var e, ri, url;
      try {
        result = qs.parse(result);
        ri = "" + pocket.redirect_uri + "?code=" + result.code;
        if (req.query.token) {
          ri += "&state=" + req.query.token;
        }
        ri = encodeURIComponent(ri);
        url = "" + authorizeUrl + "?request_token=" + result.code + "&redirect_uri=" + ri;
        return res.redirect(url);
      } catch (_error) {
        e = _error;
        return next(e);
      }
    });
  };

  authCallback = function(req, res, next, options) {
    return request.post({
      headers: {
        'content-type': 'application/x-www-form-urlencoded'
      },
      url: pocket.getAccessTokenUrl(),
      body: qs.stringify({
        consumer_key: pocket.consumer_key,
        code: req.query.code
      }),
      timeout: 10 * 1000
    }, function(err, resp, result) {
      var e, ret;
      try {
        if (resp.statusCode !== 200) {
          ret = {
            message: result
          };
        } else {
          ret = qs.parse(result);
        }
        ret.refer = options.refer;
      } catch (_error) {
        e = _error;
        ret = err || e;
      }
      return options.afterSuccess(ret, req, res, next);
    });
  };

  module.exports = function(options) {
    if (options == null) {
      options = {};
    }
    options.authorizeUri || (options.authorizeUri = '/pocket/authorize');
    options.pocketCallback || (options.pocketCallback = '/pocket/callback');
    options.refer || (options.refer = 'pocket');
    options.afterSuccess || (options.afterSuccess = function(ret, req, res) {
      return redirect(res, ret);
    });
    return function(req, res, next) {
      switch (req.path) {
        case options.authorizeUri:
          return authorize(req, res, next);
        case options.pocketCallback:
          return authCallback(req, res, next, options);
        default:
          return next();
      }
    };
  };

}).call(this);
